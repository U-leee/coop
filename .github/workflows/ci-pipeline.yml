name: ci

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 레포지토리 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Github Actions 가상 환경에 파이썬 설정
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10.8'

      # 3. 가상 환경에 파이썬 패키지 설치
      - name: Install dependencies
        working-directory: ./coop_project/mysite
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. 가상 환경에서 테스트 실행
      - name: Run tests
        working-directory: ./coop_project/mysite
        run: |
          python manage.py test

      # 5. 도커 빌드 위해 Buildx 설정(멀티플랫폼 빌드 지원)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 6. 도커 허브 로그인
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 7. 도커 이미지 빌드, 도커 허브에 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/coop:latest,${{ secrets.DOCKER_USERNAME }}/coop:${{ github.sha }}

      # 8. k8s 매니페스트 파일에서 이미지 업데이트
      - name: Update Kubernetes manifests
        run: |
          sed -i 's|image: .*|image: ${{ secrets.DOCKER_USERNAME }}/coop:${{ github.sha }}|' k8s/coop-deploy.yaml

      # 9. 변경된 매니페스트 파일 커밋,푸시
      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add k8s/coop-deploy.yaml
          git commit -m 'Update Kubernetes manifest with new image'
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
